# JO17 Tactical Manager - Modern Analysis Options 2025
# Updated for Flutter 3.32+ and Dart 3.8+ compatibility
# Removes deprecated rules and fixes conflicts

include: package:flutter_lints/flutter.yaml

analyzer:
  exclude:
    - "**/*.g.dart"
    - "**/*.freezed.dart"
    - "**/generated_plugin_registrant.dart"
    - "build/**"
    - "test/**/*.mocks.dart"
    - "packages/test_utils/**"

  language:
    strict-casts: true
    strict-inference: true
    strict-raw-types: true

  errors:
    # Critical errors - prevent bugs
    invalid_assignment: error
    invalid_use_of_protected_member: error
    missing_return: error
    dead_code: error
    unused_import: error
    unused_local_variable: error
    missing_required_argument: error
    undefined_named_parameter: error
    undefined_getter: error

    # Demote these to warnings for gradual migration
    todo: warning
    fixme: warning
    lines_longer_than_80_chars: warning
    always_specify_types: warning

linter:
  rules:
    # Core error prevention - keep enabled
    - avoid_empty_else
    - avoid_slow_async_io
    - cancel_subscriptions
    - close_sinks
    - comment_references
    - control_flow_in_finally
    - empty_statements
    - hash_and_equals
    - literal_only_boolean_expressions
    - no_adjacent_strings_in_list
    - no_duplicate_case_values
    - no_logic_in_create_state
    - prefer_void_to_null
    - test_types_in_equals
    - throw_in_finally
    - unnecessary_statements
    - unrelated_type_equality_checks
    - use_key_in_widget_constructors
    - valid_regexps

    # Modern style rules - updated for Dart 3.8+
    - always_declare_return_types
    - annotate_overrides
    - avoid_bool_literals_in_conditional_expressions
    - avoid_catching_errors
    - avoid_double_and_int_checks
    - avoid_field_initializers_in_const_classes
    - avoid_function_literals_in_foreach_calls
    - avoid_implementing_value_types
    - avoid_init_to_null
    - avoid_null_checks_in_equality_operators
    - avoid_positional_boolean_parameters
    - avoid_print
    - avoid_private_typedef_functions
    # - avoid_redundant_argument_values
    - avoid_relative_lib_imports
    - avoid_renaming_method_parameters
    - avoid_return_types_on_setters
    - avoid_setters_without_getters
    - avoid_shadowing_type_parameters
    - avoid_single_cascade_in_expression_statements
    - avoid_types_as_parameter_names
    - avoid_unnecessary_containers
    - avoid_unused_constructor_parameters
    - avoid_void_async
    - await_only_futures
    - camel_case_extensions
    - camel_case_types
    - cascade_invocations
    - cast_nullable_to_non_nullable
    - constant_identifier_names
    - curly_braces_in_flow_control_structures
    - directives_ordering
    - empty_catches
    - empty_constructor_bodies
    - exhaustive_cases
    - file_names
    - flutter_style_todos
    - implementation_imports
    - join_return_with_assignment
    - leading_newlines_in_multiline_strings
    - library_names
    - library_prefixes
    - missing_whitespace_between_adjacent_strings
    - no_runtimeType_toString
    - non_constant_identifier_names
    - null_closures
    - one_member_abstracts
    - only_throw_errors
    - overridden_fields
    - package_names
    - package_prefixed_library_names
    - parameter_assignments
    - prefer_adjacent_string_concatenation
    - prefer_asserts_in_initializer_lists
    - prefer_asserts_with_message
    - prefer_collection_literals
    - prefer_conditional_assignment
    - prefer_const_constructors
    - prefer_const_constructors_in_immutables
    - prefer_const_declarations
    - prefer_const_literals_to_create_immutables
    - prefer_constructors_over_static_methods
    # PROFESSIONALLY DISABLED: prefer_expression_function_bodies
    # Expert analysis shows this rule is not suitable for:
    # - Flutter build methods with complex returns
    # - Factory methods with cascade notation
    # - Methods with complex logic that benefit from explicit body
    # Reference: RydMike analysis & Flutter style guide
    # - prefer_expression_function_bodies

    - prefer_final_fields
    - prefer_final_in_for_each
    - prefer_final_locals
    - prefer_for_elements_to_map_fromIterable
    - prefer_foreach
    - prefer_function_declarations_over_variables
    - prefer_generic_function_type_aliases
    - prefer_if_elements_to_conditional_expressions
    - prefer_if_null_operators
    - prefer_initializing_formals
    - prefer_inlined_adds

    # PROFESSIONALLY DISABLED: prefer_int_literals
    # Expert analysis shows this rule:
    # - Breaks type safety in fold operations (forces int when double needed)
    # - Hides when a number is actually double type
    # - Goes against explicit type declaration best practices
    # - Commonly disabled in production Flutter apps
    # Reference: https://gist.github.com/rydmike/fdb53ddd933c37d20e6f3188a936cd4c
    # - prefer_int_literals
    - prefer_interpolation_to_compose_strings
    - prefer_is_empty
    - prefer_is_not_empty
    - prefer_is_not_operator
    - prefer_iterable_whereType
    - prefer_null_aware_operators
    - prefer_relative_imports
    - prefer_single_quotes
    - prefer_spread_collections
    - prefer_typing_uninitialized_variables
    - provide_deprecation_message
    - recursive_getters
    - require_trailing_commas
    - sized_box_for_whitespace
    - slash_for_doc_comments
    - sort_child_properties_last
    - sort_constructors_first
    - sort_unnamed_constructors_first
    - type_annotate_public_apis
    - type_init_formals
    - unawaited_futures
    - unnecessary_await_in_return
    - unnecessary_brace_in_string_interps
    - unnecessary_const
    - unnecessary_getters_setters
    - unnecessary_lambdas
    - unnecessary_new
    - unnecessary_null_aware_assignments
    - unnecessary_null_checks
    - unnecessary_null_in_if_null_operators
    - unnecessary_nullable_for_final_variable_declarations
    - unnecessary_overrides
    - unnecessary_parenthesis
    - unnecessary_raw_strings
    - unnecessary_string_escapes
    - unnecessary_string_interpolations
    - unnecessary_this
    - use_build_context_synchronously
    - use_full_hex_values_for_flutter_colors
    - use_function_type_syntax_for_parameters
    - use_if_null_to_convert_nulls_to_bools
    - use_is_even_rather_than_modulo
    - use_late_for_private_fields_and_variables
    - use_named_constants
    - use_raw_strings
    - use_rethrow_when_possible
    - use_setters_to_change_properties
    - use_string_buffers
    - use_to_and_as_if_applicable
    - void_checks

    # Flutter specific rules
    - use_colored_box
    - use_decorated_box
    - sized_box_shrink_expand

    # DISABLED RULES - Conflicting or too strict for gradual migration
    # - always_specify_types  # Conflicts with omit_local_variable_types
    # - omit_local_variable_types  # Conflicts with always_specify_types
    # - avoid_types_on_closure_parameters  # Conflicts with always_specify_types
    # - always_put_control_body_on_new_line  # Too strict for existing code
    # - always_put_required_named_parameters_first  # Conflicts with Flutter patterns
    # - avoid_annotating_with_dynamic  # Too strict for migration
    # - avoid_catches_without_on_clauses  # Sometimes needed for broad catches
    # - lines_longer_than_80_chars  # Too strict for existing code, demoted to warning
