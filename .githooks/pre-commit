#!/bin/bash

# Pre-commit hook for code quality and database migration validation
# Ensures consistent code formatting, fixes, and migration integrity
# Date: 2025-08-01

echo "🔍 Running pre-commit quality & migration validation..."

# =============================================================================
# PHASE 1: FLUTTER CODE QUALITY PIPELINE
# =============================================================================

echo "📊 Phase 1: Flutter Code Quality Pipeline"

# Check if this is a Flutter project
if [ ! -f "pubspec.yaml" ]; then
    echo "❌ pubspec.yaml not found. Are you in the Flutter project root?"
    exit 1
fi

# 1. Flutter Analyze - Check for errors/warnings
echo "🔍 Step 1/3: Running flutter analyze..."
if ! flutter analyze --no-fatal-infos; then
    echo ""
    echo "💥 FLUTTER ANALYZE FAILED!"
    echo "❌ Commit aborted - fix analyzer errors first"
    echo ""
    echo "🔧 Fix the analyzer issues and try again:"
    echo "   1. Review the analyzer errors above"
    echo "   2. Fix the problematic code"
    echo "   3. Run: flutter analyze"
    echo "   4. Commit again when clean"
    echo ""
    exit 1
fi
echo "✅ Flutter analyze passed"

# 2. Dart Format - Ensure consistent formatting
echo "🎨 Step 2/3: Running dart format..."
FORMATTED_FILES=$(dart format . --set-exit-if-changed --line-length=80)
if [ $? -ne 0 ]; then
    echo "📝 Code formatting applied automatically"
    # Add formatted files to commit
    git add -A
    echo "✅ All files formatted and re-staged"
else
    echo "✅ Code formatting already perfect"
fi

# 3. Dart Fix - Apply automated improvements
echo "🔧 Step 3/3: Running dart fix..."
FIXES_APPLIED=$(dart fix --apply 2>&1)
if echo "$FIXES_APPLIED" | grep -q "Applied"; then
    echo "🔧 Automated fixes applied:"
    echo "$FIXES_APPLIED"
    # Add fixed files to commit
    git add -A
    echo "✅ Fixes applied and re-staged"
else
    echo "✅ No automated fixes needed"
fi

echo "🎉 Phase 1 Complete: Code quality pipeline passed"
echo ""

# =============================================================================
# PHASE 2: DATABASE MIGRATION VALIDATION
# =============================================================================

echo "📊 Phase 2: Database Migration Validation"

# Check if we're in the right directory
if [ ! -f "scripts/test_migrations_locally.sh" ]; then
    echo "❌ Migration test script not found. Are you in the project root?"
    exit 1
fi

# Only run migration tests if migrations were changed
if git diff --cached --name-only | grep -q "supabase/migrations/"; then
    echo "📊 Migration files detected in commit - running validation..."

    # Run the local migration test
    if ! ./scripts/test_migrations_locally.sh; then
        echo ""
        echo "💥 MIGRATION VALIDATION FAILED!"
        echo "❌ Commit aborted to prevent GitHub CI failures"
        echo ""
        echo "🔧 Fix the migration issues and try again:"
        echo "   1. Review the migration errors above"
        echo "   2. Fix the problematic SQL"
        echo "   3. Test manually: ./scripts/test_migrations_locally.sh"
        echo "   4. Commit again when tests pass"
        echo ""
        exit 1
    fi

    echo "✅ All migrations validated successfully!"
else
    echo "ℹ️ No migration changes detected - skipping validation"
fi

echo "🚀 Pre-commit validation complete - proceeding with commit"
exit 0
