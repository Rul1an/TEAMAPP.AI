name: Flutter Web CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  quality:
    name: Test Flutter Web
    runs-on: ubuntu-latest
    env:
      # Expose Dart Code Metrics credentials (may be empty on forks)
      DCM_CI_KEY: ${{ secrets.DCM_CI_KEY }}
      DCM_EMAIL: ${{ secrets.DCM_EMAIL }}

    steps:
    - uses: actions/checkout@v4

    - name: Debug - Show directory structure
      run: |
        echo "=== Current directory ==="
        pwd
        echo "=== Root directory contents ==="
        ls -la
        echo "=== Check if jo17_tactical_manager exists ==="
        if [ -d "jo17_tactical_manager" ]; then
          echo "jo17_tactical_manager directory exists"
          echo "=== Contents of jo17_tactical_manager ==="
          ls -la jo17_tactical_manager/
        else
          echo "jo17_tactical_manager directory NOT found"
          echo "=== Looking for pubspec.yaml ==="
          find . -name "pubspec.yaml" -type f
        fi

    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.32.x'
        channel: 'stable'
        cache: true

    # Install Melos CLI globally so that `melos bootstrap` is available
    - name: Install Melos CLI
      run: |
        dart pub global activate melos 2.9.0
        echo "${HOME}/.pub-cache/bin" >> $GITHUB_PATH

    - name: Install DCM CLI
      # Only install the proprietary Dart Code Metrics CLI when the required secrets are present
      if: ${{ env.DCM_CI_KEY != '' && env.DCM_EMAIL != '' }}
      uses: CQLabs/setup-dcm@v2
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}

    - name: Cache pub dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.pub-cache
          ~/.dart_tool
        key: ${{ runner.os }}-flutter-${{ hashFiles('**/pubspec.lock') }}

    - name: Install dependencies
      run: |
        # Check if jo17_tactical_manager exists and contains a pubspec; prefer it over workspace-level pubspec.yaml
        if [ -f "jo17_tactical_manager/pubspec.yaml" ]; then
          echo "Found pubspec.yaml in jo17_tactical_manager → using that as project root"
          cd jo17_tactical_manager
          flutter pub get
        elif [ -f "pubspec.yaml" ]; then
          echo "Using pubspec.yaml in workspace root"
          flutter pub get
        else
          echo "ERROR: Could not find pubspec.yaml"
          exit 1
        fi

    - name: Bootstrap (melos)
      run: |
        if [ -f "melos.yaml" ]; then
          melos bootstrap
        elif [ -f "jo17_tactical_manager/melos.yaml" ]; then
          cd jo17_tactical_manager
          melos bootstrap
        else
          echo "No melos.yaml found – skipping bootstrap."
        fi

    - name: Generate code (build_runner)
      run: |
        if [ -f "jo17_tactical_manager/pubspec.yaml" ]; then
          cd jo17_tactical_manager
          flutter pub run build_runner build --delete-conflicting-outputs --verbose
        elif [ -f "pubspec.yaml" ]; then
          flutter pub run build_runner build --delete-conflicting-outputs --verbose
        fi

    - name: Run tests with coverage
      run: |
        if [ -f "jo17_tactical_manager/pubspec.yaml" ]; then
          cd jo17_tactical_manager
          flutter test --coverage
          ./coverage.sh
        elif [ -f "pubspec.yaml" ]; then
          flutter test --coverage
          ./coverage.sh
        else
          echo "ERROR: Could not find pubspec.yaml"
          exit 1
        fi

    - name: Analyze code (fatal-infos)
      run: |
        if [ -f "jo17_tactical_manager/pubspec.yaml" ]; then
          cd jo17_tactical_manager
          dart analyze
        elif [ -f "pubspec.yaml" ]; then
          dart analyze
        else
          echo "ERROR: Could not find pubspec.yaml"
          exit 1
        fi

    - name: Dart Code Metrics Analysis (license-protected)
      if: ${{ env.DCM_CI_KEY != '' && env.DCM_EMAIL != '' }}
      env:
        # Re-expose the credentials for the DCM binary at runtime
        DCM_CI_KEY: ${{ env.DCM_CI_KEY }}
        DCM_EMAIL: ${{ env.DCM_EMAIL }}
      run: |
        if [ -f "jo17_tactical_manager/pubspec.yaml" ]; then
          cd jo17_tactical_manager
        fi
        dcm analyze lib --fatal-style --fatal-warnings --ci-key "$DCM_CI_KEY" --email "$DCM_EMAIL"

    - name: Build web
      run: |
        if [ -f "jo17_tactical_manager/pubspec.yaml" ]; then
          cd jo17_tactical_manager
          flutter build web --release --web-renderer canvaskit
        elif [ -f "pubspec.yaml" ]; then
          flutter build web --release --web-renderer canvaskit
        else
          echo "ERROR: Could not find pubspec.yaml"
          exit 1
        fi

    - name: Upload web build artifact
      uses: actions/upload-artifact@v4
      with:
        name: web-build
        path: |
          build/web/**
          jo17_tactical_manager/build/web/**
        if-no-files-found: error

    - name: Upload lcov coverage
      uses: actions/upload-artifact@v4
      with:
        name: lcov-report
        path: |
          coverage/lcov.info
          jo17_tactical_manager/coverage/lcov.info
        if-no-files-found: warn

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v5
      with:
        files: |
          coverage/lcov.info
          jo17_tactical_manager/coverage/lcov.info
        flags: unit
        verbose: true

  lighthouse:
    name: Lighthouse CI
    needs: quality
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
    - uses: actions/checkout@v4

    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: web-build
        path: build/web/

    - name: Run Lighthouse CI
      uses: treosh/lighthouse-ci-action@v10
      with:
        uploadArtifacts: true
        temporaryPublicStorage: true
        configPath: ./lighthouserc.json
      continue-on-error: true
