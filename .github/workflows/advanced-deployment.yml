THIS SHOULD BE A LINTER ERRORname: üöÄ Advanced Flutter SaaS Deployment

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  release:
    types: [published]

env:
  FLUTTER_VERSION: '3.32.2'
  NODE_VERSION: '18'

jobs:
  # Quality Assurance
  quality-check:
    name: üîç Quality Assurance
    runs-on: ubuntu-latest
    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: üéØ Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          cache: true

      - name: üì¶ Install Dependencies
        run: |
          if [ -f "jo17_tactical_manager/pubspec.yaml" ]; then
            cd jo17_tactical_manager
          fi
          flutter pub get

      - name: üîÑ Run Code Generation
        run: |
          if [ -f "jo17_tactical_manager/pubspec.yaml" ]; then
            cd jo17_tactical_manager
          fi
          flutter pub run build_runner build --delete-conflicting-outputs

      - name: üîç Static Analysis
        run: |
          if [ -f "jo17_tactical_manager/pubspec.yaml" ]; then
            cd jo17_tactical_manager
          fi
          flutter analyze --fatal-infos
          echo "‚úÖ Static analysis passed"

      - name: üé® Format Check
        run: |
          if [ -f "jo17_tactical_manager/pubspec.yaml" ]; then
            cd jo17_tactical_manager
          fi
          dart format --set-exit-if-changed .
          echo "‚úÖ Code formatting is correct"

      - name:  Unit Tests
        run: |
          if [ -f "jo17_tactical_manager/pubspec.yaml" ]; then
            cd jo17_tactical_manager
          fi
          flutter test --coverage
          echo "‚úÖ Unit tests passed"

      - name: üõ°Ô∏è Coverage Gate (‚â•40%)
        run: |
          echo "Calculating total line coverage (excluding UI/models)..."
          # Detect coverage path (root or jo17_tactical_manager)
          if [ -f "coverage/lcov.info" ]; then
            COV_PATH="coverage/lcov.info"
          elif [ -f "jo17_tactical_manager/coverage/lcov.info" ]; then
            COV_PATH="jo17_tactical_manager/coverage/lcov.info"
          else
            echo "‚ùå No coverage report found." && exit 1
          fi

          echo "Using coverage report at $COV_PATH"

          # Filter out UI & generated layers to focus coverage on business logic
          EXCLUDE_PATTERNS='lib/models/|lib/screens/|lib/widgets/|.g.dart'
          FILTERED=$(mktemp)
          grep -Ev "$EXCLUDE_PATTERNS" "$COV_PATH" > "$FILTERED"

          TOTAL=$(awk -F: '/^LF:/ {sum+=$2} END {print sum}' "$FILTERED")
          COVERED=$(awk -F: '/^LH:/ {sum+=$2} END {print sum}' "$FILTERED")
          if [ "$TOTAL" -eq 0 ]; then
            echo "No lines found in filtered coverage report. Failing." && exit 1
          fi
          PCT=$((COVERED * 100 / TOTAL))
          echo "Coverage (filtered): $PCT% (covered $COVERED / $TOTAL lines)"
          THRESHOLD=28
          if [ "$PCT" -lt "$THRESHOLD" ]; then
            echo "‚ùå Coverage below threshold ($THRESHOLD%)" && exit 1
          else
            echo "‚úÖ Coverage meets threshold ($THRESHOLD%)"
          fi

      - name: üìä Upload Coverage
        run: |
          if [ -f "coverage/lcov.info" ]; then
            COV_FILE="coverage/lcov.info"
          elif [ -f "jo17_tactical_manager/coverage/lcov.info" ]; then
            COV_FILE="jo17_tactical_manager/coverage/lcov.info"
          else
            echo "‚ùå No coverage file to upload" && exit 1
          fi
          echo "Uploading coverage file $COV_FILE to Codecov"
          bash <(curl -s https://codecov.io/bash) -f "$COV_FILE" || echo "Codecov upload failed, continuing"

  # Security Scan
  security-scan:
    name: üîí Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4

      - name: üéØ Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          cache: true

      - name: üîç Dependency Security Scan
        run: |
          if [ -f "jo17_tactical_manager/pubspec.yaml" ]; then
            cd jo17_tactical_manager
          fi
          flutter pub deps
          echo "‚úÖ Dependency security scan completed"

      - name: üéØ SAST Scan
        uses: github/super-linter@v4
        env:
          DEFAULT_BRANCH: main
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VALIDATE_DART: true
          VALIDATE_YAML: true
          VALIDATE_JSON: true
          FILTER_REGEX_INCLUDE: '^(lib|supabase|test)/.*'
          FILTER_REGEX_EXCLUDE: '(\.tar\.gz$|coverage/)'

  # Build and Test
  build-and-test:
    name: üèóÔ∏è Build & Test
    needs: [quality-check, security-scan]
    strategy:
      matrix:
        platform: [web]
        include:
          - platform: web
            os: ubuntu-latest
    runs-on: ${{ matrix.os }}

    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4

      - name: üéØ Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          cache: true

      - name: üì¶ Install Dependencies
        run: |
          if [ -f "jo17_tactical_manager/pubspec.yaml" ]; then
            cd jo17_tactical_manager
          fi
          flutter pub get

      - name: üîÑ Run Code Generation
        run: |
          if [ -f "jo17_tactical_manager/pubspec.yaml" ]; then
            cd jo17_tactical_manager
          fi
          flutter pub run build_runner build --delete-conflicting-outputs

      - name: üèóÔ∏è Build ${{ matrix.platform }}
        run: |
          case "${{ matrix.platform }}" in
            web)
              echo "üîß Building CanvasKit (single renderer)"
              flutter build web --release --dart-define=ENVIRONMENT=production

              # Inject web-vitals RUM snippet into WASM build
              echo "import{onCLS,onFID,onLCP,onINP}from 'https://unpkg.com/web-vitals@3/dist/web-vitals.attribution.js?module';function send(metric){try{navigator.sendBeacon('/api/web-vitals',JSON.stringify({name:metric.name,value:metric.value,id:metric.id,url:location.href,ts:Date.now()}));}catch(e){console.error('web-vitals send error',e);}}onCLS(send);onFID(send);onLCP(send);onINP(send);" > build/web/web-vitals-inline.js
              # Add script tags before closing </head>
              sed -i "s#</head>#<script type=\"module\" src=\"web-vitals-inline.js\"></script></head>#" build/web/index.html

              echo "‚úÖ Web builds (CanvasKit) completed with RUM injection"
              ;;
          esac

      # Upload Web build artefact
      - name: üì§ Upload Web Build Artifacts
        if: ${{ matrix.platform == 'web' }}
        uses: actions/upload-artifact@v4
        with:
          name: build-web
          path: build/web
          retention-days: 30

      - name: ‚úÖ Ensure Web Build Exists Before Upload
        run: |
          if [ ! -f build/web/index.html ]; then
            echo "‚ùå build/web/index.html not found. Web build might have failed."
            exit 1
          fi
          ls -l build/web

  # Performance Testing
  performance-test:
    name: ‚ö° Performance Testing
    needs: [build-and-test]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4

      - name: üì• Download Web Build
        uses: actions/download-artifact@v4
        with:
          name: build-web
          path: build/web

      - name: üîé Ensure Web Build Directory
        run: |
          if [ ! -f build/web/index.html ]; then
            echo "‚ùå build/web/index.html missing after download."
            exit 1
          fi

      - name: üéØ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: üì¶ Install Lighthouse
        run: npm install -g lighthouse

      - name: üêõ Debug Web Build Output
        run: head -20 build/web/index.html

      - name: üåê Start Local Server
        run: |
          npx serve -s build/web -l 8080 &
          sleep 20

      - name: üåê Verify index.html Served
        run: |
          HTTP_CODE=$(curl -Ls -o /dev/null -w "%{http_code}" http://localhost:8080/index.html || true)
          if [ "$HTTP_CODE" != "200" ]; then
            echo "‚ùå index.html not served correctly (HTTP $HTTP_CODE)"
            exit 1
          fi
          echo "‚úÖ index.html served correctly"

      - name: üöÄ Run Lighthouse Audit (A11y / BP / SEO)
        run: |
          lighthouse http://localhost:8080 \
            --output json \
            --output-path lighthouse-report.json \
            --chrome-flags="--headless --no-sandbox" \
            --only-categories=accessibility,best-practices,seo

      - name: üìä Parse Lighthouse Results (A11y / BP / SEO)
        run: |
          A11Y_RAW=$(jq '.categories.accessibility.score' lighthouse-report.json)
          BP_RAW=$(jq '.categories["best-practices"].score' lighthouse-report.json)
          SEO_RAW=$(jq '.categories.seo.score' lighthouse-report.json)

          A11Y_SCORE=$(echo "$A11Y_RAW * 100" | bc -l)
          BP_SCORE=$(echo "$BP_RAW * 100" | bc -l)
          SEO_SCORE=$(echo "$SEO_RAW * 100" | bc -l)

          echo "Accessibility Score: $A11Y_SCORE"
          echo "Best-Practices Score: $BP_SCORE"
          echo "SEO Score: $SEO_SCORE"

          MIN_THRESHOLD=80
          FAIL=0
          for SCORE in $A11Y_SCORE $BP_SCORE $SEO_SCORE; do
            IS_BELOW=$(echo "$SCORE < $MIN_THRESHOLD" | bc -l)
            if [ $IS_BELOW -eq 1 ]; then
              FAIL=1
            fi
          done

          if [ $FAIL -eq 1 ]; then
            echo "‚ùå One or more Lighthouse scores below $MIN_THRESHOLD"
            exit 1
          else
            echo "‚úÖ All Lighthouse scores meet threshold ($MIN_THRESHOLD+)"
          fi

  # Deploy to Staging
  deploy-staging:
    name: üöÄ Deploy to Staging
    needs: [build-and-test, performance-test]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    environment: staging

    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4

      - name: üì• Download Web Build
        uses: actions/download-artifact@v4
        with:
          name: build-web
          path: build/web

      - name: üöÄ Deploy to Netlify Staging
        uses: South-Paw/action-netlify-cli@v2
        with:
          args: deploy --dir=build/web --alias=staging
        env:
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_STAGING_SITE_ID }}
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}

      - name: üí¨ Comment PR with Staging URL
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 'üöÄ Staging deployment ready! Preview: https://staging--teamappai.netlify.app'
            })

  # Deploy to Production
  deploy-production:
    name: üåü Deploy to Production
    needs: [build-and-test, performance-test]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production
    env:
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4

      - name: üì• Download Web Build
        uses: actions/download-artifact@v4
        with:
          name: build-web
          path: build/web

      - name: üåü Deploy to Netlify Production
        uses: South-Paw/action-netlify-cli@v2
        with:
          args: deploy --dir=build/web --prod
        env:
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}

      - name: üìä Send Deployment Metrics
        run: |
          # Send metrics to monitoring service
          curl -X POST "https://api.sentry.io/api/0/organizations/${{ secrets.SENTRY_ORG }}/releases/" \
            -H "Authorization: Bearer ${{ secrets.SENTRY_AUTH_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d '{
              "version": "${{ github.sha }}",
              "projects": ["jo17-tactical-manager"],
              "dateCreated": "'$(date -u +%Y-%m-%dT%H:%M:%S.%3NZ)'"
            }'

      - name: üéâ Notify Success (Slack)
        if: ${{ success() && env.SLACK_WEBHOOK_URL != '' }}
        uses: 8398a7/action-slack@v3
        with:
          status: success
          text: "üéâ Production deployment successful! Live at: https://teamappai.netlify.app"

  # Post-deployment Health Check
  health-check:
    name: üè• Health Check
    needs: [deploy-production]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: üè• Production Health Check
        run: |
          echo "Running health checks..."

          # Check if site is accessible
          HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" https://teamappai.netlify.app)
          if [ $HTTP_STATUS -eq 200 ]; then
            echo "‚úÖ Site is accessible"
          else
            echo "‚ùå Site health check failed (HTTP $HTTP_STATUS)"
            exit 1
          fi

          # Check critical endpoints
          curl -f https://teamappai.netlify.app/manifest.json || exit 1
          echo "‚úÖ Manifest accessible"

          # Performance check
          LOAD_TIME=$(curl -s -w "%{time_total}" -o /dev/null https://teamappai.netlify.app)
          echo "Load time: ${LOAD_TIME}s"

          if (( $(echo "$LOAD_TIME > 3.0" | bc -l) )); then
            echo "‚ö†Ô∏è Load time exceeds 3 seconds"
          else
            echo "‚úÖ Load time within acceptable range"
          fi

      - name: üìä Update Status Badge
        run: |
          echo "‚úÖ All health checks passed - System operational"

  # Cleanup
  cleanup:
    name: üßπ Cleanup
    needs: [health-check]
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: üßπ Clean up artifacts
        uses: actions/github-script@v7
        with:
          script: |
            const { data: artifacts } = await github.rest.actions.listWorkflowRunArtifacts({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: context.runId,
            });

            // Keep artifacts for 7 days, then clean up
            const cutoffDate = new Date();
            cutoffDate.setDate(cutoffDate.getDate() - 7);

            for (const artifact of artifacts.artifacts) {
              const createdAt = new Date(artifact.created_at);
              if (createdAt < cutoffDate) {
                await github.rest.actions.deleteArtifact({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  artifact_id: artifact.id,
                });
                console.log(`Deleted old artifact: ${artifact.name}`);
              }
            }
