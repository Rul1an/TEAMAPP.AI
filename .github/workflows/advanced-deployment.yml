name: 🚀 Advanced Flutter SaaS Deployment

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  release:
    types: [published]

env:
  FLUTTER_VERSION: '3.32.2'
  NODE_VERSION: '18'

jobs:
  # Quality Assurance
  quality-check:
    name: 🔍 Quality Assurance
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: 🎯 Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          cache: true

      - name: 📦 Install Dependencies
        working-directory: .
        run: flutter pub get

      - name: 🔍 Static Analysis
        working-directory: .
        run: |
          flutter analyze --no-fatal-infos
          echo "✅ Static analysis passed"

      - name: 🎨 Format Check
        working-directory: .
        run: |
          dart format --set-exit-if-changed .
          echo "✅ Code formatting is correct"

      - name: 🧪 Unit Tests
        working-directory: .
        run: |
          flutter test --coverage
          echo "✅ Unit tests passed"

      - name: 📊 Upload Coverage
        if: ${{ hashFiles('coverage/lcov.info') != '' }}
        uses: codecov/codecov-action@v3
        with:
          files: coverage/lcov.info
          fail_ci_if_error: false

  # Security Scan
  security-scan:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🎯 Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          cache: true

      - name: 🔍 Dependency Security Scan
        working-directory: .
        run: |
          flutter pub deps
          echo "✅ Dependency security scan completed"

      - name: 🎯 SAST Scan
        uses: github/super-linter@v4
        env:
          DEFAULT_BRANCH: main
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VALIDATE_DART: true
          VALIDATE_YAML: true
          VALIDATE_JSON: true
          FILTER_REGEX_INCLUDE: '^(lib|supabase|test)/.*'
          FILTER_REGEX_EXCLUDE: '(\.tar\.gz$|coverage/)'

  # Build and Test
  build-and-test:
    name: 🏗️ Build & Test
    needs: [quality-check, security-scan]
    strategy:
      matrix:
        platform: [web, android, ios]
        include:
          - platform: web
            os: ubuntu-latest
          - platform: android
            os: ubuntu-latest
          - platform: ios
            os: macos-latest
    runs-on: ${{ matrix.os }}

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🎯 Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          cache: true

      - name: 📦 Install Dependencies
        working-directory: .
        run: flutter pub get

      - name: 🏗️ Build ${{ matrix.platform }}
        run: |
          case "${{ matrix.platform }}" in
            web)
              flutter build web --release --dart-define=ENVIRONMENT=production
              echo "✅ Web build completed"
              ;;
            android)
              flutter build apk --release --dart-define=ENVIRONMENT=production
              echo "✅ Android build completed"
              ;;
            ios)
              flutter build ios --release --no-codesign --dart-define=ENVIRONMENT=production
              echo "✅ iOS build completed"
              ;;
          esac

      - name: 📤 Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.platform }}
          path: |
            build/web/
            build/app/outputs/flutter-apk/
            build/ios/iphoneos/
          retention-days: 30

  # Performance Testing
  performance-test:
    name: ⚡ Performance Testing
    needs: [build-and-test]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 📥 Download Web Build
        uses: actions/download-artifact@v4
        with:
          name: build-web
          path: build/web/

      - name: 🎯 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 📦 Install Lighthouse
        run: npm install -g lighthouse

      - name: 🌐 Start Local Server
        run: |
          cd build/web
          python3 -m http.server 8080 &
          sleep 5

      - name: 🚀 Run Lighthouse Performance Test
        run: |
          lighthouse http://localhost:8080 \
            --output json \
            --output-path lighthouse-report.json \
            --chrome-flags="--headless --no-sandbox"

      - name: 📊 Parse Performance Results
        run: |
          PERFORMANCE_SCORE=$(cat lighthouse-report.json | jq '.categories.performance.score * 100')
          echo "Performance Score: $PERFORMANCE_SCORE"
          if (( $(echo "$PERFORMANCE_SCORE < 80" | bc -l) )); then
            echo "❌ Performance score below threshold (80)"
            exit 1
          else
            echo "✅ Performance score meets requirements"
          fi

  # Deploy to Staging
  deploy-staging:
    name: 🚀 Deploy to Staging
    needs: [build-and-test, performance-test]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    environment: staging

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 📥 Download Web Build
        uses: actions/download-artifact@v4
        with:
          name: build-web
          path: build/web/

      - name: 🚀 Deploy to Netlify Staging
        uses: netlify/actions/cli@master
        with:
          args: deploy --dir=build/web --alias=staging
        env:
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_STAGING_SITE_ID }}
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}

      - name: 💬 Comment PR with Staging URL
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '🚀 Staging deployment ready! Preview: https://staging--teamappai.netlify.app'
            })

  # Deploy to Production
  deploy-production:
    name: 🌟 Deploy to Production
    needs: [build-and-test, performance-test]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 📥 Download Web Build
        uses: actions/download-artifact@v4
        with:
          name: build-web
          path: build/web/

      - name: 🌟 Deploy to Netlify Production
        uses: netlify/actions/cli@master
        with:
          args: deploy --dir=build/web --prod
        env:
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}

      - name: 📊 Send Deployment Metrics
        run: |
          # Send metrics to monitoring service
          curl -X POST "https://api.sentry.io/api/0/organizations/${{ secrets.SENTRY_ORG }}/releases/" \
            -H "Authorization: Bearer ${{ secrets.SENTRY_AUTH_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d '{
              "version": "${{ github.sha }}",
              "projects": ["jo17-tactical-manager"],
              "dateCreated": "'$(date -u +%Y-%m-%dT%H:%M:%S.%3NZ)'"
            }'

      - name: 🎉 Notify Success
        uses: 8398a7/action-slack@v3
        with:
          status: success
          text: "🎉 Production deployment successful! Live at: https://teamappai.netlify.app"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
        if: success()

  # Post-deployment Health Check
  health-check:
    name: 🏥 Health Check
    needs: [deploy-production]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: 🏥 Production Health Check
        run: |
          echo "Running health checks..."

          # Check if site is accessible
          HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" https://teamappai.netlify.app)
          if [ $HTTP_STATUS -eq 200 ]; then
            echo "✅ Site is accessible"
          else
            echo "❌ Site health check failed (HTTP $HTTP_STATUS)"
            exit 1
          fi

          # Check critical endpoints
          curl -f https://teamappai.netlify.app/manifest.json || exit 1
          echo "✅ Manifest accessible"

          # Performance check
          LOAD_TIME=$(curl -s -w "%{time_total}" -o /dev/null https://teamappai.netlify.app)
          echo "Load time: ${LOAD_TIME}s"

          if (( $(echo "$LOAD_TIME > 3.0" | bc -l) )); then
            echo "⚠️ Load time exceeds 3 seconds"
          else
            echo "✅ Load time within acceptable range"
          fi

      - name: 📊 Update Status Badge
        run: |
          echo "✅ All health checks passed - System operational"

  # Cleanup
  cleanup:
    name: 🧹 Cleanup
    needs: [health-check]
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: 🧹 Clean up artifacts
        uses: actions/github-script@v7
        with:
          script: |
            const { data: artifacts } = await github.rest.actions.listWorkflowRunArtifacts({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: context.runId,
            });

            // Keep artifacts for 7 days, then clean up
            const cutoffDate = new Date();
            cutoffDate.setDate(cutoffDate.getDate() - 7);

            for (const artifact of artifacts.artifacts) {
              const createdAt = new Date(artifact.created_at);
              if (createdAt < cutoffDate) {
                await github.rest.actions.deleteArtifact({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  artifact_id: artifact.id,
                });
                console.log(`Deleted old artifact: ${artifact.name}`);
              }
            }
