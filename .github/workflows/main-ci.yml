name: 🚀 Modern CI/CD Pipeline - 2025 Best Practices

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

# Security & Concurrency Controls - 2025 Best Practices
permissions: {}  # Force job-level specification - LEAST PRIVILEGE PRINCIPLE

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ github.ref != 'refs/heads/main' }}

env:
  FLUTTER_VERSION: '3.32.x'
  NODE_VERSION: '20'

jobs:
  # Phase 1: Essential Quality Checks
  quality-and-test:
    name: 📋 Quality & Testing
    runs-on: ubuntu-latest
    timeout-minutes: 15
    permissions:
      contents: read
      actions: read
    outputs:
      should-deploy: ${{ steps.changes.outputs.should-deploy }}
    steps:
      - name: 🔐 Harden Runner
        uses: step-security/harden-runner@63c24ba6bd7ba022e95695ff85de572c04a18142  # v2.7.0
        with:
          egress-policy: audit

      - name: 📂 Checkout
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332  # v4.1.7
        with:
          fetch-depth: 0

      - name: 🔍 Detect Changes
        id: changes
        uses: dorny/paths-filter@de90cc6fb38fc0963ad72b210f1f284cd68cea36  # v3.0.2
        with:
          filters: |
            should-deploy:
              - 'lib/**'
              - 'web/**'
              - 'pubspec.yaml'
              - 'netlify.toml'
              - '.github/workflows/main-ci.yml'

      - name: 📱 Setup Flutter
        uses: subosito/flutter-action@44ac965b96f18d999802d4b807e3256d5a3f9fa1  # v2.16.0
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: stable
          cache: true

      - name: 📦 Cache Dependencies
        uses: actions/cache@v4  # GitHub enforced tag-based reference (SHA pinning deprecated for cache)
        with:
          path: |
            ~/.pub-cache
            build/
          key: ${{ runner.os }}-flutter-${{ hashFiles('**/pubspec.lock') }}
          restore-keys: |
            ${{ runner.os }}-flutter-

      - name: 🔧 Install Dependencies
        run: flutter pub get

      - name: 🧹 Quality Gate
        run: |
          echo "::group::Flutter Analyze"
          flutter analyze --fatal-infos
          echo "::endgroup::"

          echo "::group::Dart Format Check"
          dart format . --set-exit-if-changed
          echo "::endgroup::"

          echo "::group::Flutter Test"
          flutter test --coverage --reporter=json > test-results.json
          echo "::endgroup::"

      - name: 📊 Upload Coverage
        uses: codecov/codecov-action@v4  # GitHub enforced tag-based reference (SHA pinning deprecated)
        with:
          files: coverage/lcov.info
          fail_ci_if_error: false

      - name: 📈 Test Report
        uses: dorny/test-reporter@v1
        if: always()
        with:
          name: Flutter Tests
          path: test-results.json
          reporter: flutter-json

  # Phase 2: Build & Deploy Pipeline
  build-and-deploy:
    name: 🏗️ Build & Deploy
    runs-on: ubuntu-latest
    needs: quality-and-test
    if: |
      github.ref == 'refs/heads/main' &&
      needs.quality-and-test.outputs.should-deploy == 'true'
    timeout-minutes: 10
    permissions:
      contents: read
      actions: read
    environment:
      name: production
      url: ${{ steps.deploy.outputs.deploy-url }}
    steps:
      - name: 🔐 Harden Runner
        uses: step-security/harden-runner@v2
        with:
          egress-policy: audit

      - name: 📂 Checkout
        uses: actions/checkout@v4

      - name: 📱 Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: stable
          cache: true

      - name: 📦 Restore Cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.pub-cache
            build/
          key: ${{ runner.os }}-flutter-${{ hashFiles('**/pubspec.lock') }}

      - name: 🏗️ Build Web
        run: |
          flutter pub get
          flutter build web --release --no-web-resources-cdn \
            --dart-define=FLUTTER_WEB_CANVASKIT_URL=https://unpkg.com/canvaskit-wasm@0.39.1/

          # Add modern Netlify _headers file (2025 best practice)
          echo "Creating Netlify _headers file with COMPLETE Flutter CanvasKit CSP support..."
          cat << 'EOF' > build/web/_headers
          /*
            Content-Security-Policy: default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval' https://unpkg.com https://www.gstatic.com https://fonts.gstatic.com; style-src 'self' 'unsafe-inline' https://fonts.googleapis.com https://www.gstatic.com; font-src 'self' https://fonts.gstatic.com https://www.gstatic.com; img-src 'self' data: https: blob:; connect-src 'self' https://*.supabase.co https://*.supabase.io https://www.gstatic.com https://fonts.gstatic.com; media-src 'self' blob:; worker-src 'self' blob: https://www.gstatic.com; frame-src 'none'; object-src 'none'; base-uri 'self'; form-action 'self'
            X-Frame-Options: DENY
            X-Content-Type-Options: nosniff
            X-XSS-Protection: 1; mode=block
            Referrer-Policy: strict-origin-when-cross-origin
          EOF

          # Advanced Build Analytics (2025 best practice)
          echo "::group::Build Analytics & Performance Tracking"

          # Build size tracking with trend analysis
          BUILD_SIZE_KB=$(du -sk build/web/ | cut -f1)
          BUILD_SIZE_MB=$(echo "scale=2; $BUILD_SIZE_KB/1024" | bc)

          echo "📊 Build Metrics:"
          echo "- Size: ${BUILD_SIZE_MB}MB (${BUILD_SIZE_KB}KB)"
          echo "- Files: $(find build/web -type f | wc -l)"
          echo "- Largest assets:"
          find build/web -type f -exec ls -lh {} + | sort -rh -k5 | head -5

          # Performance thresholds
          if [ $BUILD_SIZE_KB -gt 15360 ]; then  # >15MB
            echo "⚠️ BUILD SIZE WARNING: ${BUILD_SIZE_MB}MB exceeds 15MB threshold"
            echo "Consider asset optimization or code splitting"
          elif [ $BUILD_SIZE_KB -gt 10240 ]; then  # >10MB
            echo "⚡ BUILD SIZE NOTICE: ${BUILD_SIZE_MB}MB - monitoring recommended"
          else
            echo "✅ BUILD SIZE: Optimal (${BUILD_SIZE_MB}MB)"
          fi

          # CSP Headers verification
          echo "🔒 Security Headers Verification:"
          if grep -q "Content-Security-Policy" build/web/_headers; then
            echo "✅ CSP headers configured"
            echo "✅ Flutter CanvasKit CSP support enabled"
          else
            echo "❌ CSP headers missing!"
          fi

          # Build summary for GitHub
          cat >> $GITHUB_STEP_SUMMARY << EOF
          ## 📊 Build Analytics

          | Metric | Value |
          |--------|-------|
          | Build Size | ${BUILD_SIZE_MB}MB |
          | File Count | $(find build/web -type f | wc -l) |
          | CSP Headers | ✅ Configured |
          | Performance | $([ $BUILD_SIZE_KB -lt 10240 ] && echo "🚀 Optimal" || echo "⚡ Monitoring") |
          EOF

          echo "::endgroup::"

      - name: 📤 Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: web-build-${{ github.sha }}
          path: build/web/
          retention-days: 7

      - name: 🎯 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 🚀 Deploy to Netlify
        id: deploy
        run: |
          echo "🚀 Deploying to Netlify..."
          OUTPUT=$(npx netlify-cli deploy \
            --dir=build/web \
            --prod \
            --json \
            --message "Deploy ${{ github.sha }}-${{ github.run_number }}")

          echo "$OUTPUT" | tee netlify-output.json

          # Extract deploy URL for output
          DEPLOY_URL=$(echo "$OUTPUT" | jq -r '.deploy_url // .url // "https://teamappai.netlify.app"')
          echo "deploy-url=$DEPLOY_URL" >> $GITHUB_OUTPUT
          echo "✅ Netlify deploy successful: $DEPLOY_URL"
        env:
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}

      - name: 📝 Deployment Summary
        run: |
          echo "## 🚀 Deployment Complete!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment**: Production" >> $GITHUB_STEP_SUMMARY
          echo "- **Deploy URL**: ${{ steps.deploy.outputs.deploy-url }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY

  # Phase 3: Preview Deployments for PRs
  preview-deploy:
    name: 🔍 Preview Deploy
    runs-on: ubuntu-latest
    needs: quality-and-test
    if: |
      github.event_name == 'pull_request' &&
      needs.quality-and-test.outputs.should-deploy == 'true'
    timeout-minutes: 10
    permissions:
      contents: read
      pull-requests: write  # Required for PR comments
    environment:
      name: preview-pr-${{ github.event.number }}
      url: ${{ steps.deploy-preview.outputs.deploy-url }}
    steps:
      - name: 📂 Checkout
        uses: actions/checkout@v4

      - name: 📱 Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: stable
          cache: true

      - name: 🏗️ Build Web Preview
        run: |
          flutter pub get
          flutter build web --release

      - name: 🔍 Deploy Preview
        id: deploy-preview
        uses: netlify/actions/cli@master
        with:
          args: deploy --dir=build/web --message="Preview for PR #${{ github.event.number }}"
        env:
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}

      - name: 💬 PR Comment
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## 🔍 Preview Deployment

              **Deploy Preview**: ${{ steps.deploy-preview.outputs.deploy-url }}

              Changes ready for review! 🚀`
            })
