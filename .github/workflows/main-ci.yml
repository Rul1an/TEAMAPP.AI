name: 🚀 Modern CI/CD Pipeline - 2025 Best Practices

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

permissions: {}

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ github.ref != 'refs/heads/main' }}

env:
  FLUTTER_VERSION: '3.32.x'
  NODE_VERSION: '20'

jobs:
  quality-and-test:
    name: 📋 Quality & Testing
    runs-on: ubuntu-latest
    timeout-minutes: 15
    permissions:
      contents: read
      actions: read
      checks: write
      pull-requests: write
    outputs:
      should-deploy: ${{ steps.changes.outputs.should-deploy }}
    steps:
      - name: 🔐 Harden Runner
        uses: step-security/harden-runner@v2
        with:
          egress-policy: audit

      - name: 📂 Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔍 Detect Changes
        id: changes
        uses: dorny/paths-filter@v3
        with:
          filters: |
            should-deploy:
              - 'lib/**'
              - 'web/**'
              - 'pubspec.yaml'
              - 'netlify.toml'
              - '.github/workflows/main-ci.yml'

      - name: 📱 Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: stable
          cache: true

      - name: 📦 Cache Dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.pub-cache
            build/
          key: ${{ runner.os }}-flutter-${{ hashFiles('pubspec.lock') }}
          restore-keys: |
            ${{ runner.os }}-flutter-

      - name: 🔧 Install Dependencies
        run: flutter pub get

      - name: 🧹 Quality Gate
        run: |
          echo "::group::🔍 Environment Debug Info"
          flutter doctor -v
          flutter --version
          dart --version
          uname -a
          free -h || true
          df -h
          echo "::endgroup::"

          echo "::group::📦 Dependencies Debug"
          echo "pubspec.yaml dependencies:"
          cat pubspec.yaml
          echo ""
          echo "pubspec.lock status:"
          if [ -f pubspec.lock ]; then
            echo "✅ pubspec.lock exists"
            echo "Lock file size: $(wc -l < pubspec.lock) lines"
            head -20 pubspec.lock
          else
            echo "❌ pubspec.lock not found"
          fi
          echo ""
          flutter pub deps --style=tree | head -50
          echo "::endgroup::"

          echo "::group::🔍 Flutter Analyze (Verbose)"
          if ! flutter analyze --fatal-infos --verbose; then
            echo "::error::Flutter analyze failed!"
            flutter analyze --machine || true
            if [ -f analysis_options.yaml ]; then
              echo "✅ analysis_options.yaml:" && cat analysis_options.yaml
            else
              echo "❌ analysis_options.yaml not found"
            fi
            exit 1
          else
            echo "✅ Flutter analyze passed successfully"
          fi
          echo "::endgroup::"

          echo "::group::🎨 Dart Format Check (Verbose)"
          if ! dart format . --set-exit-if-changed; then
            echo "::error::Dart format check failed!"
            dart format . --output=show --set-exit-if-changed || true
            dart format . --output=show | head -50 || true
            exit 1
          else
            echo "✅ Dart format check passed"
          fi
          echo "::endgroup::"

          echo "::group::🧪 Flutter Test (Verbose)"
          mkdir -p test-results
          set +e
          flutter test --coverage --reporter=failures-only > test-results/test-results.txt 2>&1
          TEST_EXIT_CODE=$?
          set -e
          echo "Flutter test exit code: $TEST_EXIT_CODE"

          if [ -f test-results/test-results.txt ]; then
            echo "Test results file created ($(wc -l < test-results/test-results.txt) lines)"
            ACTUAL_FAILURES=$(grep -E "(FAIL|ERROR|Exception)" test-results/test-results.txt | grep -v "Protected (404)" | grep -v "Handles gracefully" | grep -v "tests passed" | grep -v "integration_test plugin was not detected" | wc -l)
            PASSED_TESTS=$(grep -E "(✅|tests passed)" test-results/test-results.txt | wc -l)
            echo "- Actual failures: $ACTUAL_FAILURES"
            echo "- Passed indicators: $PASSED_TESTS"
            echo "\nRecent test output (last 50 lines):"
            tail -50 test-results/test-results.txt
            if [ $ACTUAL_FAILURES -gt 0 ]; then
              echo "::error::Found actual test failures!"
              exit 1
            fi
          else
            echo "::error::No test results file created!"
            exit 1
          fi
          echo "::endgroup::"

          echo "::group::📊 Coverage Analysis"
          if [ -f coverage/lcov.info ]; then
            echo "✅ coverage/lcov.info exists"
            echo "Lines: $(wc -l < coverage/lcov.info)"
          else
            echo "⚠️ No coverage file generated"
          fi
          echo "::endgroup::"

      - name: 📊 Upload Coverage
        uses: codecov/codecov-action@v4
        with:
          files: coverage/lcov.info
          fail_ci_if_error: false

      - name: 📈 Test Report & Failure Analysis
        if: always()
        run: |
          echo "::group::📈 Test Report Summary"
          if [ -f test-results/test-results.txt ]; then
            echo "✅ Test results file found"
            tail -20 test-results/test-results.txt || true
          else
            echo "⚠️ No test results file found"
          fi
          echo "::endgroup::"

      - name: 📋 Upload Test Artifacts (Always)
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-artifacts-${{ github.sha }}
          path: |
            test-results/
            coverage/
            analysis_options.yaml
            pubspec.lock
          retention-days: 14

      - name: 🚨 Failure Diagnostics
        if: failure()
        run: |
          echo "::group::🚨 FAILURE DIAGNOSTICS"
          free -h || true
          df -h
          if [ -f test-results/test-results.txt ]; then tail -50 test-results/test-results.txt; fi
          git status
          git log --oneline -5
          echo "::endgroup::"

  build-and-deploy:
    name: 🏗️ Build & Deploy
    runs-on: ubuntu-latest
    needs: quality-and-test
    if: |
      github.ref == 'refs/heads/main' &&
      needs.quality-and-test.outputs.should-deploy == 'true'
    timeout-minutes: 10
    permissions:
      contents: read
      actions: read
    environment:
      name: production
      url: ${{ steps.deploy.outputs.deploy-url }}
    steps:
      - name: 🔐 Harden Runner
        uses: step-security/harden-runner@v2
        with:
          egress-policy: audit

      - name: 📂 Checkout
        uses: actions/checkout@v4

      - name: 📱 Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: stable
          cache: true

      - name: 📦 Restore Cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.pub-cache
            build/
          key: ${{ runner.os }}-flutter-${{ hashFiles('pubspec.lock') }}

      - name: 🏗️ Build Web
        run: |
          flutter pub get
          flutter build web --release --no-web-resources-cdn \
            --dart-define=FLUTTER_WEB_CANVASKIT_URL=https://unpkg.com/canvaskit-wasm@0.39.1/

          echo "Creating Netlify _headers with CanvasKit CSP"
          cat << 'EOF' > build/web/_headers
          /*
            Content-Security-Policy: default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval' https://unpkg.com https://www.gstatic.com https://fonts.gstatic.com; style-src 'self' 'unsafe-inline' https://fonts.googleapis.com https://www.gstatic.com; font-src 'self' https://fonts.gstatic.com https://www.gstatic.com; img-src 'self' data: https: blob:; connect-src 'self' https://*.supabase.co https://*.supabase.io https://www.gstatic.com https://fonts.gstatic.com; media-src 'self' blob:; worker-src 'self' blob: https://www.gstatic.com; frame-src 'none'; object-src 'none'; base-uri 'self'; form-action 'self'
            X-Frame-Options: DENY
            X-Content-Type-Options: nosniff
            X-XSS-Protection: 1; mode=block
            Referrer-Policy: strict-origin-when-cross-origin
          EOF

      - name: 📤 Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: web-build-${{ github.sha }}
          path: build/web/
          retention-days: 7

      - name: 🎯 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 🚀 Deploy to Netlify
        id: deploy
        run: |
          echo "🚀 Deploying to Netlify..."
          OUTPUT=$(npx netlify-cli deploy \
            --dir=build/web \
            --prod \
            --json \
            --message "Deploy ${{ github.sha }}-${{ github.run_number }}")
          echo "$OUTPUT" | tee netlify-output.json
          DEPLOY_URL=$(echo "$OUTPUT" | jq -r '.deploy_url // .url // "https://teamappai.netlify.app"')
          echo "deploy-url=$DEPLOY_URL" >> $GITHUB_OUTPUT
          echo "✅ Netlify deploy successful: $DEPLOY_URL"
        env:
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}

      - name: 📝 Deployment Summary
        run: |
          echo "## 🚀 Deployment Complete!" >> $GITHUB_STEP_SUMMARY
          echo "- Environment: Production" >> $GITHUB_STEP_SUMMARY
          echo "- Deploy URL: ${{ steps.deploy.outputs.deploy-url }}" >> $GITHUB_STEP_SUMMARY
          echo "- Commit: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- Branch: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY

  preview-deploy:
    name: 🔍 Preview Deploy
    runs-on: ubuntu-latest
    needs: quality-and-test
    if: |
      github.event_name == 'pull_request' &&
      needs.quality-and-test.outputs.should-deploy == 'true'
    timeout-minutes: 10
    permissions:
      contents: read
      pull-requests: write
    environment:
      name: preview-pr-${{ github.event.number }}
      url: ${{ steps.deploy-preview.outputs.deploy-url }}
    steps:
      - name: 📂 Checkout
        uses: actions/checkout@v4

      - name: 📱 Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: stable
          cache: true

      - name: 🏗️ Build Web Preview
        run: |
          flutter pub get
          flutter build web --release

      - name: 🔍 Deploy Preview
        id: deploy-preview
        uses: netlify/actions/cli@master
        with:
          args: deploy --dir=build/web --message="Preview for PR #${{ github.event.number }}"
        env:
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}

      - name: 💬 PR Comment
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## 🔍 Preview Deployment\n\n**Deploy Preview**: ${{ steps.deploy-preview.outputs.deploy-url }}\n\nChanges ready for review! 🚀`
            })
